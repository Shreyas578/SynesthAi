import { ollamaClient, type LLMRecommendation } from "./ollama-client"
import { mediaEnrichmentService } from "./media-enrichment"
import type { Recommendation } from "@/app/page"

export async function generateRecommendations(
  input: string,
  category: string,
  type: "specific" | "genre" = "specific",
  ratingFilter?: number,
  languageFilter?: string,
): Promise<{ recommendations: Recommendation[]; fromLLM: boolean; filtersAppliedButNoMatch: boolean }> {
  let llmRecommendations: LLMRecommendation[] = []
  const fromLLM = true // All recommendations now come from LLM
  let filtersAppliedButNoMatch = false

  try {
    console.log(`üéØ Generating recommendations for: "${input}" (${category}, ${type}) using Gemma 2B LLM`)

    // Step 1: Get recommendations from Ollama LLM (without filters in prompt)
    llmRecommendations = await ollamaClient.generateRecommendations(input, category, type)
    console.log(`‚úÖ Received ${llmRecommendations.length} raw recommendations from Gemma 2B LLM`)

    if (llmRecommendations.length === 0) {
      console.log("‚ö†Ô∏è No recommendations generated by LLM. Returning empty.")
      return { recommendations: [], fromLLM: true, filtersAppliedButNoMatch: false }
    }

    // Step 2: Apply filters programmatically
    let filteredRecommendations = llmRecommendations
    if (ratingFilter !== undefined) {
      filteredRecommendations = filteredRecommendations.filter((rec) => rec.rating >= ratingFilter)
      console.log(`Applied rating filter (>=${ratingFilter}). Results: ${filteredRecommendations.length}`)
    }
    if (languageFilter && (category === "movies" || category === "music")) {
      filteredRecommendations = filteredRecommendations.filter(
        (rec) => rec.details?.language?.toLowerCase() === languageFilter.toLowerCase(),
      )
      console.log(`Applied language filter (${languageFilter}). Results: ${filteredRecommendations.length}`)
    }

    // If filters result in no matches, return the original unfiltered list and set a flag
    if (filteredRecommendations.length === 0 && (ratingFilter !== undefined || languageFilter)) {
      console.log("‚ö†Ô∏è Filters applied, but no recommendations matched. Returning unfiltered list.")
      filtersAppliedButNoMatch = true
      filteredRecommendations = llmRecommendations // Revert to unfiltered list
    }

    // Step 3: Enrich with media content (still useful for real images/trailers if APIs are configured)
    console.log("üé¨ Enriching with media content (if API keys are provided)...")
    const enrichedRecommendations: Recommendation[] = await Promise.all(
      filteredRecommendations.map(async (item) => {
        // Use LLM's generated image/trailer/preview if available, otherwise try media enrichment
        const mediaEnrichment = await mediaEnrichmentService.enrichRecommendation(item, category)

        return {
          id: item.id,
          name: item.name,
          category: item.category as any, // Cast to Category type
          image: mediaEnrichment.image || item.image || `/placeholder.svg?height=300&width=200`,
          rating: item.rating,
          description: item.description,
          details: {
            trailer: mediaEnrichment.trailer || item.details.trailer,
            preview: mediaEnrichment.preview || item.details.preview,
            summary: item.details.summary,
            reason: item.details.reason,
            tips: item.details.tips,
            language: item.details.language, // Pass language from LLM
            ...mediaEnrichment.additionalInfo,
          },
        }
      }),
    )

    console.log(`üéâ Successfully generated ${enrichedRecommendations.length} enriched recommendations`)
    return { recommendations: enrichedRecommendations, fromLLM, filtersAppliedButNoMatch }
  } catch (error) {
    console.error("‚ùå Error in recommendation service:", error)
    // If an error occurs, return empty and indicate it came from LLM attempt
    return { recommendations: [], fromLLM: true, filtersAppliedButNoMatch: false }
  }
}

// Health check function (only checks Ollama now)
export async function checkServiceHealth() {
  const health = {
    ollama: false,
    timestamp: new Date().toISOString(),
  }

  try {
    console.log("üîç Checking Ollama connection...")
    health.ollama = await ollamaClient.testConnection()
  } catch (error) {
    console.error("‚ùå Ollama health check failed:", error)
  }

  return health
}
