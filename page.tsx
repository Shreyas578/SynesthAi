"use client"

import { useState } from "react"
import { CategoryTabs } from "@/components/category-tabs"
import { TasteInput } from "@/components/taste-input"
import { ResultsGallery } from "@/components/results-gallery"
import { DetailsModal } from "@/components/details-modal"
import { Header } from "@/components/header"

export type Category = "movies" | "music" | "books" | "places" | "food" | "fashion" | "games" | "art" | "mood"

export interface Recommendation {
  id: string
  name: string
  category: Category
  image: string
  rating?: number
  description: string
  details?: {
    trailer?: string
    preview?: string
    summary?: string
    tips?: string
    reason?: string
    language?: string // Added language
  }
}

export default function Home() {
  const [selectedCategory, setSelectedCategory] = useState<Category>("movies")
  const [currentStep, setCurrentStep] = useState<"category" | "input" | "results">("category")
  const [recommendations, setRecommendations] = useState<Recommendation[]>([])
  const [selectedItem, setSelectedItem] = useState<Recommendation | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [fromLLM, setFromLLM] = useState(false)
  const [filtersAppliedButNoMatch, setFiltersAppliedButNoMatch] = useState(false) // New state

  const handleCategorySelect = (category: Category) => {
    setSelectedCategory(category)
    setCurrentStep("input")
    setError(null)
    setFromLLM(false)
    setFiltersAppliedButNoMatch(false) // Reset
  }

  const handleTasteSubmit = async (
    input: string,
    type: "specific" | "genre",
    ratingFilter?: number,
    languageFilter?: string,
  ) => {
    setLoading(true)
    setError(null)
    setFromLLM(false)
    setFiltersAppliedButNoMatch(false) // Reset

    try {
      const response = await fetch("/api/recommendations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          input,
          category: selectedCategory,
          type,
          ratingFilter,
          languageFilter,
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to fetch recommendations")
      }

      const data = await response.json()
      setRecommendations(data.recommendations)
      setFromLLM(data.fromLLM)
      setFiltersAppliedButNoMatch(data.filtersAppliedButNoMatch) // Set from API response
      setCurrentStep("results")
    } catch (error) {
      console.error("Error fetching recommendations:", error)
      setError(error instanceof Error ? error.message : "An unexpected error occurred")
      setFromLLM(true) // If an error occurs, it likely means LLM fallback was used or should be
    } finally {
      setLoading(false)
    }
  }

  const handleBack = () => {
    if (currentStep === "results") {
      setCurrentStep("input")
    } else if (currentStep === "input") {
      setCurrentStep("category")
    }
    setError(null)
    setFromLLM(false)
    setFiltersAppliedButNoMatch(false) // Reset
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <Header />

      <main className="container mx-auto px-4 py-8">
        {error && (
          <div className="max-w-2xl mx-auto mb-6 p-4 bg-red-900/20 border border-red-500/50 rounded-lg">
            <h3 className="font-semibold text-red-400 mb-2">Recommendation Error</h3>
            <p className="text-red-300">{error}</p>
            <p className="text-gray-400 text-sm mt-2">
              The LLM might be experiencing issues or returned an unexpected format. Please check your Ollama setup and
              console logs.
            </p>
          </div>
        )}

        {fromLLM && (
          <div className="max-w-2xl mx-auto mb-6 p-4 bg-purple-900/20 border border-purple-500/50 rounded-lg">
            <h3 className="font-semibold text-purple-400 mb-2">AI-Generated Recommendations</h3>
            <p className="text-purple-300">
              These recommendations are generated by the local Gemma 2B LLM. Quality may vary.
            </p>
          </div>
        )}

        {filtersAppliedButNoMatch && (
          <div className="max-w-2xl mx-auto mb-6 p-4 bg-orange-900/20 border border-orange-500/50 rounded-lg">
            <h3 className="font-semibold text-orange-400 mb-2">No Matches for Filters</h3>
            <p className="text-orange-300">
              Your filters were applied, but no recommendations matched. Displaying the unfiltered list instead.
            </p>
          </div>
        )}

        {currentStep === "category" && (
          <CategoryTabs selectedCategory={selectedCategory} onCategorySelect={handleCategorySelect} />
        )}

        {currentStep === "input" && (
          <TasteInput category={selectedCategory} onSubmit={handleTasteSubmit} onBack={handleBack} loading={loading} />
        )}

        {currentStep === "results" && (
          <ResultsGallery
            recommendations={recommendations}
            onItemClick={setSelectedItem}
            onBack={handleBack}
            category={selectedCategory}
          />
        )}
      </main>

      {selectedItem && <DetailsModal item={selectedItem} onClose={() => setSelectedItem(null)} />}
    </div>
  )
}
